version: "3.9"

networks:
  bitbucket-network:
    name: bitbucket-network
  traefik-network:
    name: traefik-network

volumes:
  bitbucket-data:
  bitbucket-postgres:
  #bitbucket-postgres-backup:
  #bitbucket-data-backups:
  #bitbucket-database-backups:
  #traefik-certificates:

services:
  postgres:
    image: ${BITBUCKET_POSTGRES_IMAGE_TAG}
    volumes:
      - bitbucket-postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${BITBUCKET_DB_NAME}
      POSTGRES_USER: ${BITBUCKET_DB_USER}
      POSTGRES_PASSWORD: ${BITBUCKET_DB_PASSWORD}
    networks:
      - bitbucket-network
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "${BITBUCKET_DB_NAME}", "-U", "${BITBUCKET_DB_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  bitbucket:
    image: ${BITBUCKET_IMAGE_TAG}
    volumes:
      - bitbucket-data:${DATA_PATH}
    environment:
      JVM_MINIMUM_MEMORY: ${BITBUCKET_JVM_MINIMUM_MEMORY}
      JVM_MAXIMUM_MEMORY: ${BITBUCKET_JVM_MAXIMUM_MEMORY}
      SERVER_PROXY_NAME: ${BITBUCKET_HOSTNAME}
#      SERVER_SECURE: 'true'
#      SERVER_SCHEME: https
#      SERVER_PROXY_PORT: 443
#      SEARCH_ENABLED: 'false'
#      PLUGIN_SEARCH_CONFIG_BASEURL: http://opensearch.docker.localhost
      SETUP_DISPLAYNAME: Bitbucket
      SETUP_BASEURL: ${BITBUCKET_URL}
      JDBC_DRIVER: org.postgresql.Driver
      JDBC_USER: ${BITBUCKET_DB_USER}
      JDBC_PASSWORD: ${BITBUCKET_DB_PASSWORD}
      JDBC_URL: jdbc:postgresql://postgres:5432/${BITBUCKET_DB_NAME}
    deploy:
      resources:
        limits:
          memory: 10G
        reservations:
          memory: 5G
    networks:
      - bitbucket-network
      - traefik-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7990/"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 90s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.bitbucket.entrypoints=spiderman"
      - "traefik.http.routers.bitbucket.rule=Host(`${BITBUCKET_HOSTNAME}`)"
      - "traefik.http.routers.bitbucket.service=bitbucket"
      - "traefik.http.services.bitbucket.loadbalancer.server.port=7990"
      - "traefik.http.services.bitbucket.loadbalancer.passhostheader=true"
      - "traefik.http.routers.bitbucket.middlewares=compresstraefik"
      - "traefik.http.middlewares.compresstraefik.compress=true"
      - "traefik.tcp.routers.bitbucket-ssh.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.bitbucket-ssh.service=bitbucket-ssh"
      - "traefik.tcp.routers.bitbucket-ssh.entrypoints=ssh"
      - "traefik.tcp.services.bitbucket-ssh.loadbalancer.server.port=7999"
      - "traefik.docker.network=traefik-network"
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      traefik:
        condition: service_healthy

  traefik:
    image: ${TRAEFIK_IMAGE_TAG}
    command:
      - "--log.level=${TRAEFIK_LOG_LEVEL}"
      - "--accesslog=true"
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--ping=true"
      - "--ping.entrypoint=ping"
      - "--entryPoints.ping.address=:8082"
      - "--entryPoints.web.address=:80"
      - "--entrypoints.spiderman.address=:7990"
      - "--entryPoints.ssh.address=:7999"
      - "--providers.docker=true"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.exposedByDefault=false"
      - "--certificatesresolvers.letsencrypt.acme.storage=/etc/traefik/acme/acme.json"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
      - "--global.checkNewVersion=true"
      - "--global.sendAnonymousUsage=false"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # Listen do Docker API to grab the tags.
      # - traefik-certificates:/etc/traefik/acme
    networks:
      - traefik-network
    ports:
      - "9000:80"
      - "9080:8080" # Web UI Port
      - "9990:7990" # Bitbucket (to avoid
    healthcheck:
      test: ["CMD", "wget", "http://localhost:8082/ping","--spider"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`${TRAEFIK_HOSTNAME}`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.entrypoints=web"
      - "traefik.http.services.dashboard.loadbalancer.server.port=8080"
      - "traefik.http.services.dashboard.loadbalancer.passhostheader=true"
      - "traefik.http.routers.dashboard.middlewares=authtraefik"
      - "traefik.http.middlewares.authtraefik.basicauth.users=${TRAEFIK_BASIC_AUTH}"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
    restart: unless-stopped

#  backups:
#    image: ${BITBUCKET_POSTGRES_IMAGE_TAG}
#    command: >-
#      sh -c 'sleep $BACKUP_INIT_SLEEP &&
#      while true; do
#        pg_dump -h postgres -p 5432 -d $BITBUCKET_DB_NAME -U $BITBUCKET_DB_USER | gzip > $POSTGRES_BACKUPS_PATH/$POSTGRES_BACKUP_NAME-$(date "+%Y-%m-%d_%H-%M").gz &&
#        tar -zcpf $DATA_BACKUPS_PATH/$DATA_BACKUP_NAME-$(date "+%Y-%m-%d_%H-%M").tar.gz $DATA_PATH &&
#        find $POSTGRES_BACKUPS_PATH -type f -mtime +$POSTGRES_BACKUP_PRUNE_DAYS | xargs rm -f &&
#        find $DATA_BACKUPS_PATH -type f -mtime +$DATA_BACKUP_PRUNE_DAYS | xargs rm -f;
#        sleep $BACKUP_INTERVAL; done'
#    volumes:
#      - bitbucket-postgres-backup:/var/lib/postgresql/data
#      - bitbucket-data:${DATA_PATH}
#      - bitbucket-data-backups:${DATA_BACKUPS_PATH}
#      - bitbucket-database-backups:${POSTGRES_BACKUPS_PATH}
#    environment:
#      BITBUCKET_DB_NAME: ${BITBUCKET_DB_NAME}
#      BITBUCKET_DB_USER: ${BITBUCKET_DB_USER}
#      PGPASSWORD: ${BITBUCKET_DB_PASSWORD}
#      BACKUP_INIT_SLEEP: ${BACKUP_INIT_SLEEP}
#      BACKUP_INTERVAL: ${BACKUP_INTERVAL}
#      POSTGRES_BACKUP_PRUNE_DAYS: ${POSTGRES_BACKUP_PRUNE_DAYS}
#      DATA_BACKUP_PRUNE_DAYS: ${DATA_BACKUP_PRUNE_DAYS}
#      POSTGRES_BACKUPS_PATH: ${POSTGRES_BACKUPS_PATH}
#      DATA_BACKUPS_PATH: ${DATA_BACKUPS_PATH}
#      DATA_PATH: ${DATA_PATH}
#      POSTGRES_BACKUP_NAME: ${POSTGRES_BACKUP_NAME}
#      DATA_BACKUP_NAME: ${DATA_BACKUP_NAME}
#    networks:
#      - bitbucket-network
#    restart: unless-stopped
#    depends_on:
#      postgres:
#        condition: service_healthy